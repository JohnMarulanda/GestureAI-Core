#!/usr/bin/env python3
"""
Script para construir el ejecutable de Volume Controller usando PyInstaller
Espec√≠ficamente dise√±ado para Windows
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def build_volume_controller():
    """Construye el ejecutable del Volume Controller"""
    
    print("üöÄ Iniciando construcci√≥n del ejecutable Volume Controller...")
    
    # Verificar que estamos en Windows
    if sys.platform != "win32":
        print("‚ùå Este script est√° dise√±ado espec√≠ficamente para Windows")
        return False
    
    # Obtener rutas del proyecto
    project_root = Path(__file__).parent
    models_dir = project_root / "models"
    controller_file = project_root / "core" / "controllers" / "volume_controller.py"
    
    # Verificar archivos necesarios
    if not controller_file.exists():
        print(f"‚ùå No se encontr√≥ el archivo: {controller_file}")
        return False
    
    if not models_dir.exists():
        print(f"‚ùå No se encontr√≥ el directorio de modelos: {models_dir}")
        return False
    
    gesture_model = models_dir / "gesture_recognizer.task"
    if not gesture_model.exists():
        print(f"‚ùå No se encontr√≥ el modelo: {gesture_model}")
        return False
    
    print("‚úÖ Archivos verificados correctamente")
    
    # Limpiar construcciones anteriores
    build_dir = project_root / "build"
    dist_dir = project_root / "dist"
    
    if build_dir.exists():
        print("üßπ Limpiando directorio build...")
        shutil.rmtree(build_dir)
    
    if dist_dir.exists():
        print("üßπ Limpiando directorio dist...")
        shutil.rmtree(dist_dir)
    
    # Comando PyInstaller
    pyinstaller_cmd = [
        "pyinstaller",
        "--onefile",                                    # Un solo archivo ejecutable
        "--windowed",                                   # Sin ventana de consola
        "--name=VolumeController",                      # Nombre del ejecutable
        "--icon=NONE",                                  # Sin icono por ahora
        f"--add-data={gesture_model};models",           # Incluir modelo
        "--hidden-import=cv2",                          # Importaciones ocultas
        "--hidden-import=mediapipe",
        "--hidden-import=numpy",
        "--hidden-import=pyautogui",
        "--hidden-import=mediapipe.tasks",
        "--hidden-import=mediapipe.tasks.python",
        "--hidden-import=mediapipe.tasks.python.vision",
        "--hidden-import=mediapipe.python.solutions",
        "--hidden-import=mediapipe.python.solutions.drawing_utils",
        "--hidden-import=mediapipe.python.solutions.drawing_styles",
        "--hidden-import=matplotlib",
        "--hidden-import=matplotlib.pyplot",
        "--collect-all=mediapipe",                      # Recopilar todos los archivos de mediapipe
        "--collect-all=cv2",                            # Recopilar todos los archivos de opencv
        "--collect-all=matplotlib",                     # Recopilar todos los archivos de matplotlib
        "--exclude-module=tkinter",                     # Excluir m√≥dulos innecesarios
        "--exclude-module=PIL.ImageTk",
        "--distpath=dist",                              # Directorio de salida
        "--workpath=build",                             # Directorio de trabajo
        "--clean",                                      # Limpiar cache
        str(controller_file)                            # Archivo principal
    ]
    
    print("üî® Ejecutando PyInstaller...")
    print(f"Comando: {' '.join(pyinstaller_cmd)}")
    
    try:
        # Ejecutar PyInstaller
        result = subprocess.run(pyinstaller_cmd, 
                              cwd=project_root, 
                              capture_output=True, 
                              text=True)
        
        if result.returncode == 0:
            print("‚úÖ Construcci√≥n exitosa!")
            
            # Verificar que el ejecutable se cre√≥
            exe_path = dist_dir / "VolumeController.exe"
            if exe_path.exists():
                print(f"üì¶ Ejecutable creado en: {exe_path}")
                print(f"üìè Tama√±o del archivo: {exe_path.stat().st_size / (1024*1024):.1f} MB")
                
                # Crear directorio de distribuci√≥n
                release_dir = project_root / "release"
                release_dir.mkdir(exist_ok=True)
                
                # Copiar ejecutable a release
                release_exe = release_dir / "VolumeController.exe"
                shutil.copy2(exe_path, release_exe)
                
                print(f"üìÅ Ejecutable copiado a: {release_exe}")
                print("\nüéâ ¬°Construcci√≥n completada exitosamente!")
                print("\nüìã Instrucciones de uso:")
                print("1. Ejecuta VolumeController.exe")
                print("2. Permite el acceso a la c√°mara cuando se solicite")
                print("3. Usa estos gestos para controlar el volumen:")
                print("   üëç Pulgar arriba: Subir volumen")
                print("   üëé Pulgar abajo: Bajar volumen")
                print("   ‚úä Pu√±o cerrado: Silenciar/Activar")
                print("4. Presiona ESC para salir")
                
                return True
            else:
                print("‚ùå El ejecutable no se cre√≥ correctamente")
                return False
        else:
            print("‚ùå Error durante la construcci√≥n:")
            print("STDOUT:", result.stdout)
            print("STDERR:", result.stderr)
            return False
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error ejecutando PyInstaller: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

def check_dependencies():
    """Verifica que las dependencias necesarias est√©n instaladas"""
    print("üîç Verificando dependencias...")
    
    # Mapeo de nombres de paquetes a nombres de m√≥dulos
    package_module_map = {
        "pyinstaller": "PyInstaller",
        "opencv-python": "cv2", 
        "mediapipe": "mediapipe",
        "numpy": "numpy",
        "pyautogui": "pyautogui",
        "matplotlib": "matplotlib"
    }
    
    missing_packages = []
    
    for package, module in package_module_map.items():
        try:
            __import__(module)
            print(f"‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package}")
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è  Faltan las siguientes dependencias:")
        for package in missing_packages:
            print(f"   - {package}")
        print("\nüí° Inst√°lalas con:")
        print(f"python -m pip install {' '.join(missing_packages)}")
        return False
    
    print("‚úÖ Todas las dependencias est√°n instaladas")
    return True

if __name__ == "__main__":
    print("=" * 60)
    print("üéØ CONSTRUCTOR DE EJECUTABLE - VOLUME CONTROLLER")
    print("=" * 60)
    
    # Verificar dependencias
    if not check_dependencies():
        sys.exit(1)
    
    # Construir ejecutable
    if build_volume_controller():
        print("\nüéä ¬°Proceso completado exitosamente!")
        sys.exit(0)
    else:
        print("\nüí• Proceso fall√≥")
        sys.exit(1) 