#!/usr/bin/env python3
"""
Script de prueba para el Control de Atajos de Teclado por Gestos
Utiliza MediaPipe Gesture Recognizer para ejecutar atajos de teclado comunes.

Gestos soportados:
1. Victoria (Victory) ‚Üí Copiar (Ctrl+C)
2. Palma abierta (Open_Palm) ‚Üí Pegar (Ctrl+V)
3. Pu√±o cerrado (Closed_Fist) ‚Üí Escape (ESC)
4. Se√±alar arriba (Pointing_Up) ‚Üí Actualizar (F5)
5. Pulgar arriba (Thumb_Up) ‚Üí Deshacer (Ctrl+Z)
6. Pulgar abajo (Thumb_Down) ‚Üí Rehacer (Ctrl+Y)
7. Te amo (ILoveYou) ‚Üí Guardar (Ctrl+S)

Controles:
- ESC: Salir del programa
"""

import sys
import os

# Agregar el directorio ra√≠z al path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.controllers.shortcuts_controller import ShortcutsController

def main():
    """Funci√≥n principal para ejecutar la prueba de control de atajos de teclado."""
    print("="*60)
    print("‚å®Ô∏è PRUEBA DE ATAJOS DE TECLADO POR GESTOS")
    print("="*60)
    print("üéØ OBJETIVO:")
    print("   Probar la ejecuci√≥n de atajos de teclado comunes usando")
    print("   7 gestos predefinidos para mayor productividad.")
    print()
    print("üñêÔ∏è GESTOS DE CONTROL:")
    print("   ‚úåÔ∏è Victoria (V)          ‚Üí Copiar (Ctrl+C)")
    print("   ‚úã Palma abierta         ‚Üí Pegar (Ctrl+V)")
    print("   ‚úä Pu√±o cerrado          ‚Üí Escape (ESC)")
    print("   ‚òùÔ∏è Se√±alar arriba        ‚Üí Actualizar (F5)")
    print("   üëç Pulgar arriba         ‚Üí Deshacer (Ctrl+Z)")
    print("   üëé Pulgar abajo          ‚Üí Rehacer (Ctrl+Y)")
    print("   ü§ü Te amo                ‚Üí Guardar (Ctrl+S)")
    print()
    print("‚å®Ô∏è FUNCIONES DE ATAJOS:")
    print("   - Copiar: Copia texto o elementos seleccionados")
    print("   - Pegar: Pega contenido del portapapeles")
    print("   - Escape: Cancela operaci√≥n actual o cierra di√°logos")
    print("   - Actualizar: Refresca p√°gina web o aplicaci√≥n")
    print("   - Deshacer: Revierte la √∫ltima acci√≥n realizada")
    print("   - Rehacer: Repite la √∫ltima acci√≥n deshecha")
    print("   - Guardar: Guarda el documento o archivo actual")
    print()
    print("üìä CARACTER√çSTICAS:")
    print("   - Ejecuci√≥n instant√°nea de atajos con alta precisi√≥n")
    print("   - Umbral de confianza: 70%")
    print("   - Delay entre atajos: 0.8 segundos")
    print("   - Soporte para 1 mano optimizado")
    print("   - Gestos universalmente reconocidos")
    print("   - Estad√≠sticas de uso en tiempo real")
    print("   - Interfaz visual con informaci√≥n detallada")
    print("   - Landmarks de mano dibujados")
    print("   - Indicadores de tiempo de espera")
    print("   - Mensajes de confirmaci√≥n visual")
    print("   - Threading para ejecuci√≥n no bloqueante")
    print()
    print("üîß CONFIGURACI√ìN:")
    print("   - Gestos: Victory, Open_Palm, Closed_Fist, Pointing_Up, Thumb_Up, Thumb_Down, ILoveYou")
    print("   - Detecci√≥n autom√°tica sin configuraci√≥n manual")
    print("   - Delay espec√≠fico para evitar ejecuciones m√∫ltiples")
    print("   - Integraci√≥n completa con sistema operativo")
    print("   - Manejo robusto de errores")
    print("   - Atajos universales multiplataforma")
    print()
    print("‚å®Ô∏è  CONTROLES:")
    print("   ESC      : Salir del programa")
    print()
    print("üéØ ATAJOS DE TECLADO:")
    print("   üìÑ COPIAR (Ctrl+C): Copia texto o elementos seleccionados")
    print("   üìã PEGAR (Ctrl+V): Pega contenido del portapapeles")
    print("   ‚ùå ESCAPE (ESC): Cancela operaci√≥n o cierra di√°logos")
    print("   üîÑ ACTUALIZAR (F5): Refresca p√°gina web o aplicaci√≥n")
    print("   ‚Ü∂ DESHACER (Ctrl+Z): Revierte la √∫ltima acci√≥n")
    print("   ‚Ü∑ REHACER (Ctrl+Y): Repite acci√≥n deshecha")
    print("   üíæ GUARDAR (Ctrl+S): Guarda documento actual")
    print()
    print("üîç REQUISITOS:")
    print("   - C√°mara web funcional")
    print("   - Modelo gesture_recognizer.task en models/")
    print("   - pyautogui instalado para ejecuci√≥n de atajos")
    print("   - Editor de texto o aplicaci√≥n para probar atajos")
    print("   - Algunos archivos de texto para probar")
    print()
    print("üí° RECOMENDACIONES DE PRUEBA:")
    print("   1. Abre un editor de texto (Notepad, Word, VS Code)")
    print("   2. Escribe algo de texto para probar Copiar/Pegar")
    print("   3. Selecciona texto y usa Victoria (V) para copiar")
    print("   4. Cambia posici√≥n del cursor y usa Palma abierta para pegar")
    print("   5. Usa Pulgar arriba para deshacer cambios")
    print("   6. Usa Pulgar abajo para rehacer")
    print("   7. Usa Te amo para guardar documento")
    print("   8. Abre un navegador web y usa Se√±alar arriba para actualizar")
    print("   9. Usa Pu√±o cerrado para cerrar di√°logos")
    print()
    print("üéØ CASOS DE USO:")
    print("   - Edici√≥n de documentos sin teclado")
    print("   - Presentaciones interactivas")
    print("   - Control remoto de aplicaciones")
    print("   - Accesibilidad para usuarios con limitaciones")
    print("   - Flujos de trabajo eficientes")
    print("   - Automatizaci√≥n de tareas repetitivas")
    print("   - Control de aplicaciones a distancia")
    print()
    print("‚ö†Ô∏è  ADVERTENCIAS:")
    print("   - Los atajos se ejecutar√°n en la aplicaci√≥n activa")
    print("   - Aseg√∫rate de tener contenido para copiar/pegar")
    print("   - Ctrl+S guardar√° en la aplicaci√≥n actual")
    print("   - Delay de 0.8 segundos entre atajos")
    print("   - F5 actualizar√° la p√°gina/aplicaci√≥n activa")
    print("   - ESC puede cerrar di√°logos o cancelar operaciones")
    print("   - Prueba en aplicaciones seguras primero")
    print()
    print("üîß ATAJOS IMPLEMENTADOS:")
    print("   - Ctrl+C: Atajo universal para copiar")
    print("   - Ctrl+V: Atajo universal para pegar")
    print("   - ESC: Tecla de escape universal")
    print("   - F5: Atajo universal para actualizar")
    print("   - Ctrl+Z: Atajo universal para deshacer")
    print("   - Ctrl+Y: Atajo universal para rehacer")
    print("   - Ctrl+S: Atajo universal para guardar")
    print()
    print("üì± APLICACIONES SUGERIDAS PARA PRUEBA:")
    print("   - Notepad/TextEdit: Para probar copiar/pegar/guardar")
    print("   - Navegador web: Para probar actualizar")
    print("   - Word/LibreOffice: Para probar edici√≥n avanzada")
    print("   - Visual Studio Code: Para programaci√≥n")
    print("   - Paint/GIMP: Para edici√≥n de im√°genes")
    print("   - Excel/Calc: Para hojas de c√°lculo")
    print()
    print("üé® GESTI√ìN DE GESTOS:")
    print("   - Victoria: Dedos √≠ndice y medio extendidos en V")
    print("   - Palma abierta: Todos los dedos extendidos")
    print("   - Pu√±o cerrado: Todos los dedos cerrados")
    print("   - Se√±alar arriba: Solo dedo √≠ndice extendido hacia arriba")
    print("   - Pulgar arriba: Solo pulgar extendido hacia arriba")
    print("   - Pulgar abajo: Solo pulgar extendido hacia abajo")
    print("   - Te amo: Pulgar, √≠ndice y me√±ique extendidos")
    print()
    
    try:
        input("Presiona ENTER para comenzar la prueba...")
    except KeyboardInterrupt:
        print("\n‚ùå Operaci√≥n cancelada por el usuario")
        return
    
    # Crear y ejecutar el controlador
    try:
        print("\n‚å®Ô∏è Inicializando controlador de atajos de teclado...")
        controller = ShortcutsController()
        controller.run()
    except Exception as e:
        print(f"‚ùå Error al ejecutar el controlador: {e}")
        print("   Verifica que:")
        print("   1. La c√°mara est√© disponible")
        print("   2. El modelo gesture_recognizer.task exista en models/")
        print("   3. Las dependencias est√©n instaladas correctamente:")
        print("      pip install mediapipe opencv-python pyautogui")
        print("   4. pyautogui est√© configurado correctamente")
        print("   5. Tengas permisos para ejecutar atajos de teclado")
        print("   6. La aplicaci√≥n de destino est√© activa")
    
    print("\nüëã ¬°Gracias por probar los atajos de teclado por gestos!")
    print("   Recuerda: Los gestos naturales hacen el trabajo m√°s eficiente")

if __name__ == "__main__":
    main() 